// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tictactoe_battle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicTacToeBattleServiceClient is the client API for TicTacToeBattleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicTacToeBattleServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*NoBody, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	CanEnterRoom(ctx context.Context, in *CanEnterRoomRequest, opts ...grpc.CallOption) (*CanEnterRoomResponse, error)
	EnterRoom(ctx context.Context, in *EnterRoomRequest, opts ...grpc.CallOption) (TicTacToeBattleService_EnterRoomClient, error)
	Declaration(ctx context.Context, in *DeclarationRequest, opts ...grpc.CallOption) (*NoBody, error)
	LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*NoBody, error)
	Attack(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*NoBody, error)
	Pick(ctx context.Context, in *PickRequest, opts ...grpc.CallOption) (*NoBody, error)
	ResetBattle(ctx context.Context, in *ResetBattleRequest, opts ...grpc.CallOption) (*NoBody, error)
}

type ticTacToeBattleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicTacToeBattleServiceClient(cc grpc.ClientConnInterface) TicTacToeBattleServiceClient {
	return &ticTacToeBattleServiceClient{cc}
}

func (c *ticTacToeBattleServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/tictactoe_battle.TicTacToeBattleService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeBattleServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/tictactoe_battle.TicTacToeBattleService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeBattleServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/tictactoe_battle.TicTacToeBattleService/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeBattleServiceClient) CanEnterRoom(ctx context.Context, in *CanEnterRoomRequest, opts ...grpc.CallOption) (*CanEnterRoomResponse, error) {
	out := new(CanEnterRoomResponse)
	err := c.cc.Invoke(ctx, "/tictactoe_battle.TicTacToeBattleService/CanEnterRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeBattleServiceClient) EnterRoom(ctx context.Context, in *EnterRoomRequest, opts ...grpc.CallOption) (TicTacToeBattleService_EnterRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicTacToeBattleService_ServiceDesc.Streams[0], "/tictactoe_battle.TicTacToeBattleService/EnterRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticTacToeBattleServiceEnterRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicTacToeBattleService_EnterRoomClient interface {
	Recv() (*BattleSituation, error)
	grpc.ClientStream
}

type ticTacToeBattleServiceEnterRoomClient struct {
	grpc.ClientStream
}

func (x *ticTacToeBattleServiceEnterRoomClient) Recv() (*BattleSituation, error) {
	m := new(BattleSituation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticTacToeBattleServiceClient) Declaration(ctx context.Context, in *DeclarationRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/tictactoe_battle.TicTacToeBattleService/Declaration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeBattleServiceClient) LeaveRoom(ctx context.Context, in *LeaveRoomRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/tictactoe_battle.TicTacToeBattleService/LeaveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeBattleServiceClient) Attack(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/tictactoe_battle.TicTacToeBattleService/Attack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeBattleServiceClient) Pick(ctx context.Context, in *PickRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/tictactoe_battle.TicTacToeBattleService/Pick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeBattleServiceClient) ResetBattle(ctx context.Context, in *ResetBattleRequest, opts ...grpc.CallOption) (*NoBody, error) {
	out := new(NoBody)
	err := c.cc.Invoke(ctx, "/tictactoe_battle.TicTacToeBattleService/ResetBattle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicTacToeBattleServiceServer is the server API for TicTacToeBattleService service.
// All implementations must embed UnimplementedTicTacToeBattleServiceServer
// for forward compatibility
type TicTacToeBattleServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*NoBody, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	CanEnterRoom(context.Context, *CanEnterRoomRequest) (*CanEnterRoomResponse, error)
	EnterRoom(*EnterRoomRequest, TicTacToeBattleService_EnterRoomServer) error
	Declaration(context.Context, *DeclarationRequest) (*NoBody, error)
	LeaveRoom(context.Context, *LeaveRoomRequest) (*NoBody, error)
	Attack(context.Context, *AttackRequest) (*NoBody, error)
	Pick(context.Context, *PickRequest) (*NoBody, error)
	ResetBattle(context.Context, *ResetBattleRequest) (*NoBody, error)
	mustEmbedUnimplementedTicTacToeBattleServiceServer()
}

// UnimplementedTicTacToeBattleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicTacToeBattleServiceServer struct {
}

func (UnimplementedTicTacToeBattleServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) Logout(context.Context, *LogoutRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) CanEnterRoom(context.Context, *CanEnterRoomRequest) (*CanEnterRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanEnterRoom not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) EnterRoom(*EnterRoomRequest, TicTacToeBattleService_EnterRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method EnterRoom not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) Declaration(context.Context, *DeclarationRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Declaration not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) LeaveRoom(context.Context, *LeaveRoomRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) Attack(context.Context, *AttackRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attack not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) Pick(context.Context, *PickRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pick not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) ResetBattle(context.Context, *ResetBattleRequest) (*NoBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBattle not implemented")
}
func (UnimplementedTicTacToeBattleServiceServer) mustEmbedUnimplementedTicTacToeBattleServiceServer() {
}

// UnsafeTicTacToeBattleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicTacToeBattleServiceServer will
// result in compilation errors.
type UnsafeTicTacToeBattleServiceServer interface {
	mustEmbedUnimplementedTicTacToeBattleServiceServer()
}

func RegisterTicTacToeBattleServiceServer(s grpc.ServiceRegistrar, srv TicTacToeBattleServiceServer) {
	s.RegisterService(&TicTacToeBattleService_ServiceDesc, srv)
}

func _TicTacToeBattleService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeBattleServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe_battle.TicTacToeBattleService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeBattleServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeBattleService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeBattleServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe_battle.TicTacToeBattleService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeBattleServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeBattleService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeBattleServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe_battle.TicTacToeBattleService/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeBattleServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeBattleService_CanEnterRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanEnterRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeBattleServiceServer).CanEnterRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe_battle.TicTacToeBattleService/CanEnterRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeBattleServiceServer).CanEnterRoom(ctx, req.(*CanEnterRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeBattleService_EnterRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EnterRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicTacToeBattleServiceServer).EnterRoom(m, &ticTacToeBattleServiceEnterRoomServer{stream})
}

type TicTacToeBattleService_EnterRoomServer interface {
	Send(*BattleSituation) error
	grpc.ServerStream
}

type ticTacToeBattleServiceEnterRoomServer struct {
	grpc.ServerStream
}

func (x *ticTacToeBattleServiceEnterRoomServer) Send(m *BattleSituation) error {
	return x.ServerStream.SendMsg(m)
}

func _TicTacToeBattleService_Declaration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeclarationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeBattleServiceServer).Declaration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe_battle.TicTacToeBattleService/Declaration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeBattleServiceServer).Declaration(ctx, req.(*DeclarationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeBattleService_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeBattleServiceServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe_battle.TicTacToeBattleService/LeaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeBattleServiceServer).LeaveRoom(ctx, req.(*LeaveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeBattleService_Attack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeBattleServiceServer).Attack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe_battle.TicTacToeBattleService/Attack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeBattleServiceServer).Attack(ctx, req.(*AttackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeBattleService_Pick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeBattleServiceServer).Pick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe_battle.TicTacToeBattleService/Pick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeBattleServiceServer).Pick(ctx, req.(*PickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeBattleService_ResetBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetBattleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeBattleServiceServer).ResetBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tictactoe_battle.TicTacToeBattleService/ResetBattle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeBattleServiceServer).ResetBattle(ctx, req.(*ResetBattleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicTacToeBattleService_ServiceDesc is the grpc.ServiceDesc for TicTacToeBattleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicTacToeBattleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tictactoe_battle.TicTacToeBattleService",
	HandlerType: (*TicTacToeBattleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _TicTacToeBattleService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _TicTacToeBattleService_Logout_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _TicTacToeBattleService_CreateRoom_Handler,
		},
		{
			MethodName: "CanEnterRoom",
			Handler:    _TicTacToeBattleService_CanEnterRoom_Handler,
		},
		{
			MethodName: "Declaration",
			Handler:    _TicTacToeBattleService_Declaration_Handler,
		},
		{
			MethodName: "LeaveRoom",
			Handler:    _TicTacToeBattleService_LeaveRoom_Handler,
		},
		{
			MethodName: "Attack",
			Handler:    _TicTacToeBattleService_Attack_Handler,
		},
		{
			MethodName: "Pick",
			Handler:    _TicTacToeBattleService_Pick_Handler,
		},
		{
			MethodName: "ResetBattle",
			Handler:    _TicTacToeBattleService_ResetBattle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnterRoom",
			Handler:       _TicTacToeBattleService_EnterRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tictactoe_battle/api.proto",
}
